{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"multip": {
        "prefix": "multip",
        "body": [
				"MultiProvider(",
					"\tproviders: [",
						"\t\tChangeNotifierProvider(create: (context)=> $1(localStorage))",
					"\t],",
					"\tchild: MaterialApp(",
						"\t\ttheme: ThemeData(",
							"\t\t\tinputDecorationTheme: InputDecorationTheme(",
								"\t\t\t\tlabelStyle: TextStyle(",
									"\t\t\t\t\tcolor: Colors.black,",
									"\t\t\t\t\tfontSize: 17,",
								"\t\t\t\t),",
								"\t\t\t\tfloatingLabelStyle: TextStyle(",
									"\t\t\t\t\tcolor: Colors.black,",
									"\t\t\t\t\tfontSize: 14,",
								"\t\t\t\t),",
								"\t\t\t\thintStyle: TextStyle(",
									"\t\t\t\t\tcolor: Colors.grey,",
								"\t\t\t\t),",
								"\t\t\t\thelperStyle: TextStyle(",
									"\t\t\t\t\tcolor: Colors.black54,",
								"\t\t\t\t),",
								"\t\t\t\tfocusedBorder: InputBorder.none,",
								"\t\t\t\tenabledBorder: InputBorder.none,",
								"\t\t\t\tborder: InputBorder.none,",
								"\t\t\t\terrorBorder: InputBorder.none,",
								"\t\t\t\tfocusedErrorBorder: InputBorder.none,",
								"\t\t\t\tdisabledBorder: InputBorder.none",
							"\t\t\t),",
							"\t\t\tprimaryColor: Colors.white,",
							"\t\t\ttextTheme: TextTheme(",
								"\t\t\t\tbodyMedium: TextStyle(",
									"\t\t\t\t\tfontSize: 17",
								"\t\t\t\t)",
							"\t\t\t)",
						"\t\t),",
						"\t\ttitle: 'No-title',",
						"\t\tdebugShowCheckedModeBanner: false,",
						"\t\tinitialRoute: '/',",
						"\t\troutes: {",
						"\t\t'/': (context)=> HomeScreen(),",        
						"\t\t},",
					"\t)",
				");"
        ],
        "description": "A brief description of what this snippet does"
    },

	"appb": {
        "prefix": "appb",
        "body": [
				"AppBar(",
        			"\ttitle: Text('$1'),",
					"\tcenterTitle: true,",
					"\tbackgroundColor: Colors.green[500],",
					"\tforegroundColor: Colors.white,",
					"\tleading: GestureDetector(",
          				"\t\tchild: Icon(",
            				"\t\t\tIcons.menu,",
            				"\t\t\tcolor: Colors.black",
						"\t\t),",
        			"\t),",
        			"\tbottom: TabBar(",
						"\t\tcontroller: _tabController,",
						"\t\tindicatorColor: Colors.yellow,",
						"\t\tlabelColor: Colors.white,",
						"\t\tunselectedLabelColor: Colors.black,",
						"\t\ttabs: [",
            				"\t\t\tTab(text: 'First Tab'),",
            				"\t\t\tTab(text: 'Second Tab'),",
          				"\t\t],",
        			"\t),",
      			"),"
        ],
        "description": "A brief description of what this snippet does"
    },

	"dropd": {
        "prefix": "dropd",
        "body": [
				"DropdownButtonFormField<String>(",
                	"\tstyle: Theme.of(context).textTheme.bodyMedium,",
                	"\tvalue: null,",
					"\tonChanged: (String? newValue) {",
                  		"\t\t//no implementation yet",
					"\t},",
                	"\tdecoration: InputDecoration(",
						"\t\tlabelText: '$1',",
						"\t\tborder: InputBorder.none",
					"\t),",
					"\titems: <String>['item 1', 'item 2']",
						"\t\t.map<DropdownMenuItem<String>>((String value) {",
						"\t\treturn DropdownMenuItem<String>(",
							"\t\t\tvalue: value,",
							"\t\t\tchild: Text(value),",
						"\t\t);",
					"\t}).toList(),",
				"),"
        ],
        "description": "A brief description of what this snippet does"
    },

	"textf": {
        "prefix": "textf",
        "body": [
				"TextFormField(",
                	"\tdecoration: InputDecoration(",
                  		"\t\tlabelText: '$1',",
                  		"\t\tborder: InputBorder.none,",
                	"\t),",
                	"\tkeyboardType: TextInputType.numberWithOptions(decimal: true),",
                	"\tinitialValue: totalTime.toString(),",
                	"\tvalidator: (value) {",
						"\t\t//no implementation yet",
                	"\t},",
                	"\tonSaved: (value) => totalTime = double.parse(value!),",
              	"),"
        ],
        "description": "A brief description of what this snippet does"
    },

	"elev": {
        "prefix": "elev",
        "body": [
				"ElevatedButton(",
					"\tonPressed: onPressed,",
					"\tstyle: ElevatedButton.styleFrom(",
						"\t\tbackgroundColor: backgroundColor ?? Theme.of(context).primaryColor,",
						"\t\tforegroundColor: textColor ?? Colors.white,",
						"\t\tpadding: const EdgeInsets.symmetric(horizontal: 40, vertical: 15),",
						"\t\tminimumSize: (width != null || height != null)",
							"\t\t\t? Size(width ?? 0, height ?? 0)",
							"\t\t\t: null,",
						"\t\tshape: RoundedRectangleBorder(",
							"\t\t\tborderRadius: borderRadius ?? BorderRadius.circular(10),",
						"\t\t),",
						"\t\televation: 5,",
						"\t\tshadowColor: Colors.black.withOpacity(0.3),",
						"\t\toverlayColor: splashColor",
					"\t),",
					"\tchild: Text(",
						"\t\ttext,",
						"\t\tstyle: const TextStyle(",
						"\t\tfontSize: 18,",
						"\t\tfontWeight: FontWeight.bold,",
						"\t\t),",
					"\t),",
				");"
        ],
        "description": "A brief description of what this snippet does"
    },

	"main": {
        "prefix": "main",
        "body": [
				"Future<void> main() async {",
					"\tWidgetsFlutterBinding.ensureInitialized();",
					"",
					"\t//await Stetho.initialize();",
					"",
					"\tawait SystemChrome.setEnabledSystemUIMode(SystemUiMode.edgeToEdge);",
					"\tawait SystemChrome.setPreferredOrientations([DeviceOrientation.portraitUp]);",
					"",
					"\tawait injectServices();",
					"",
					"\trunApp(const App());",
				"}"
        ],
        "description": "A brief description of what this snippet does"
    },

	"app": {
        "prefix": "app",
        "body": [
				"final _router = GoRouter(routes: [], debugLogDiagnostics: true);",
				"",
				"class App extends StatelessWidget {",
					"\tconst App({super.key});",
					"",
					"\t@override",
					"\tWidget build(BuildContext context) {",
						"\t\treturn MaterialApp.router(",
							"\t\t\trouterConfig: _router,",
							"\t\t\ttheme: ThemeData(",
								"\t\t\t\t// brightness: Brightness.light,",
								"\t\t\t\t// primaryColor: OOSTheme.primaryColor,",
								"\t\t\t\t// indicatorColor: OOSTheme.primaryColor,",
								"\t\t\t\t// scaffoldBackgroundColor: Colors.white,",
								"\t\t\t\t// appBarTheme: AppBarTheme(",
								"\t\t\t\t// systemOverlayStyle: SystemUiOverlayStyle.dark,",
								"\t\t\t\t// color: Colors.white,",
								"\t\t\t\t// elevation: 0,",
								"\t\t\t\t// iconTheme: const IconThemeData(color: OOSTheme.blackTwo),",
								"\t\t\t\t// titleTextStyle: _titleTextStyle(context),",
								"\t\t\t\t// toolbarTextStyle: _titleTextStyle(context),",
								"\t\t\t\t// ),",
								"\t\t\t\t// bottomSheetTheme: const BottomSheetThemeData(",
								"\t\t\t\t//   backgroundColor: Colors.white,",
								"\t\t\t\t// ),",
								"\t\t\t\t// textTheme: context.watch<FrameworkTheme>().textTheme,",
								"\t\t\t\t// colorScheme: ColorScheme.fromSwatch().copyWith(",
								"\t\t\t\t//   brightness: Brightness.light,",
								"\t\t\t\t// secondary: OOSTheme.accentColor,",
								"\t\t\t\t// ),",
							"\t\t\t),",
							"\t\t\t// theme: ThemeData(),",
							"\t\t\tdarkTheme: _buildTheme(),",
							"\t\t\tthemeMode: ThemeMode.dark,",
							"\t\t\tdebugShowCheckedModeBanner: false,",
						"\t\t);",
					"\t}",
					"",
					"\tThemeData _buildTheme() {",
						"\t\tvar baseTheme = ThemeData.dark().copyWith(",
							"\t\t\tbrightness: Brightness.light,",
							"\t\t\tcolorScheme: ColorScheme.fromSwatch().copyWith(",
								"\t\t\t\tprimary: Colors.teal,",
								"\t\t\t\tbrightness: Brightness.dark,",
							"\t\t\t),",
							"\t\t\tbottomNavigationBarTheme: const BottomNavigationBarThemeData(",
								"\t\t\t\tbackgroundColor: Colors.white,",
								"\t\t\t\tselectedItemColor: Colors.teal,",
							"\t\t\t),",
							"\t\t\tcanvasColor: Colors.white,",
							"\t\t\tscaffoldBackgroundColor: Colors.white,",
							"\t\t\tappBarTheme: const AppBarTheme(backgroundColor: Colors.white),",
						"\t\t);",
						"",
						"\t\treturn baseTheme.copyWith(",
							"\t\t\ttextTheme: GoogleFonts.latoTextTheme(baseTheme.textTheme),",
						"\t\t);",
					"\t}",
				"}"
        ],
        "description": "A brief description of what this snippet does"
    }

	
}
